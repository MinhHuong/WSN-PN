using PAT.Common.Classes.ModuleInterface;
using PAT.Common.GUI;
using PAT.Common.ModelCommon.PNCommon;
using PAT.GUI.PNDrawing;
using PAT.GUI.Properties;
using PAT.PN.Assertions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Diagnostics;
using Fireball.Docking;
using PAT.GUI.Docking;
using PAT.GUI.ModuleGUI;
using PAT.GUI.KWSNDrawing;
using System.Xml;
using PAT.Module.KWSN;
using PAT.Common.ModelCommon.WSNCommon;
using ICSharpCode.TextEditor.Document;
using System.IO;
using PAT.Common.GUI.ModelChecker;
using PAT.Common.Utility;
namespace PAT.GUI
{
    public partial class VerifyAllClusters : Form
    {
        private const string TAG = "VerifyAllClusters";

        private List<string> listPathDirectory = new List<string>();
        int test;
        protected AssertionBase Assertion;
        private PNExtendInfo mExtendInfo;
        private int VerificationIndex = -1;
        protected SpecificationBase Spec;
        public FormMain frm = null;
        //public EditorTabItem curretActiveTab = null;
        public VerifyAllClusters(List<String> listClusters, List<String> listPath)
        {
            InitializeComponent();
            listPathDirectory.AddRange(listPath);
            if (listClusters.Count == 0)
            {
                Verify_Btn.Enabled = false;
                VerifyAll_Btn.Enabled = false;
            }
            else
            {
                //add items listview resultVerify
                for (int i = 0; i < listClusters.Count; i++)
                {
                    resultVerifyGridView.Rows.Add(listClusters[i], null, null);

                    //resultGridView.Rows.Add(listClusters[i],"null");
                }
                Verify_Btn.Enabled = true;
                VerifyAll_Btn.Enabled = true;

            }
        }

        private void Close_Btn_Click(object sender, EventArgs e)
        {
            this.Close();
            if (autoVerify is FormMain)
            {
                FormMain frmMain = autoVerify as FormMain;
                frmMain.Verify_all_clusters.Enabled = true;
            }
        }

        //public void autoVerification()
        //{
        //    try
        //    {
        //        if (ParseSpecification(true) != null)
        //        {
        //            if (GUIUltility.AUTO_SAVE)
        //                Save();

        //            // mlqvu -- edit here
        //            PNTabItem cPNTabItem = CurrentEditorTabItem as PNTabItem;
        //            PNExtendInfo extendInfo = null;
        //            if (cPNTabItem != null)
        //                extendInfo = cPNTabItem.mExtendInfo;

        //            CurrentModule.ShowModelCheckingWindow(CurrentEditorTabItem.TabText.TrimEnd('*'), extendInfo);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Ultility.LogException(ex, null);
        //    }
        //}

        public object autoVerify
        {
            get;
            set;
        }

        private void VerifyAll_Btn_Click(object sender, EventArgs e)
        {
            DevLog.d(TAG, "======================Verify All====================");
            for(int i=0;i<resultVerifyGridView.Rows.Count;i++)
            {
                DevLog.d(TAG, "Selected: " + resultVerifyGridView.Rows[i].Cells[0].Value);
                if(resultVerifyGridView.Rows[i].Cells[0].Value=="")
                {
                    resultVerifyGridView.Rows[i].Visible=false;
                }
            }
            
        }

        private void Verify_Btn_Click(object sender, EventArgs e)
        {
            //---Minh---Edit all
            if (Verify_Btn.Text == "STOP")
            {
                Verify_Btn.Text = "Verify";
                Close_Btn.Enabled = true;
                VerifyAll_Btn.Enabled = true;
                resultVerifyGridView.Enabled = true;
            }
            else
            {
                if (resultVerifyGridView.SelectedCells[0].Value == null)
                {
                    MessageBox.Show("Please choose one cluster to verify", "Error");
                }
                else
                {
                    bool isOpened = false;//flag check a Document has been opened
                    if (autoVerify is FormMain)
                    {
                        string tmpName = "";
                        FormMain frmMain = autoVerify as FormMain;
                        tmpName += listPathDirectory[0].ToString();
                        tmpName += @"\" + resultVerifyGridView.SelectedCells[0].Value + ".kwsn";
                        DevLog.d(TAG, "" + tmpName);
                        for (int i = 0; i < frmMain.DockContainer.Documents.Length;i++)
                        {
                            EditorTabItem item = frmMain.DockContainer.Documents[i] as EditorTabItem;
                            if(item.FileName==tmpName)
                            {
                                isOpened = true;//this Document has been opened
                                break;
                                //Log.d(TAG, "File is opened: " + item.FileName);
                            }
                        }
                        if(isOpened==true)
                        {
                            //OutputTxtBox.AppendText("Please wait............\n");
                            OutputTxtBox.AppendText(resultVerifyGridView.SelectedCells[0].Value+".kwsn" + " has been opened......\n");
                            //OutputTxtBox.AppendText("Open " + resultVerifyGridView.SelectedCells[0].Value + ".kwsn" + " successful\n");
                            //Log.d(TAG, "CurrentActiveTab: " + curretActiveTab);
                            //EditorTabItem currentWSNItem = frmMain.DockContainer.Documents[frmMain.DockContainer.Documents.Length - 1] as EditorTabItem;
                            //Log.d(TAG, "CurrentEditorTabItem: " + frmMain.CurrentEditorTabItem.FileName);
                            int N = frmMain.DockContainer.Documents.Length;
                            DevLog.d(TAG, "Number Documents: " + N);

                            //convert to PN underground
                            int rowSelected = resultVerifyGridView.SelectedCells[0].RowIndex;
                            //resultVerifyGridView.Rows[rowSelected].Cells[0].Value="ma";
                            //resultVerifyGridView.Rows[rowSelected].Cells[1].Value = "tao";
                            resultVerifyGridView.Rows[rowSelected].Cells[2].Value = "la";

                            DevLog.d(TAG, "row: " + rowSelected);
                            Verify_Btn.Text = "STOP";
                            Close_Btn.Enabled = false;
                            VerifyAll_Btn.Enabled = false;
                            resultVerifyGridView.Enabled = false;
                            frmMain.convertToPNAfterCluster(false, true, resultVerifyGridView.SelectedCells[0].Value.ToString());//only channel
                            EditorTabItem currentPNItem = frmMain.DockContainer.Documents[frmMain.DockContainer.Documents.Length - 1] as EditorTabItem;
                            //frmMain.Save();
                            //currentWSNItem.Close();//Close WSNTabItem convert to PNTabItem
                            //Log.d(TAG, "Number Documents After: " + N);
                            currentPNItem.Close();//Close PNTabItem
                            //OutputTxtBox.AppendText("Done....\n");
                            //for(int m=0;m<N;m++)
                            //{
                            //    Log.d(TAG, "Document["+(m+1)+"]:" + frmMain.DockContainer.Documents[m]);
                            //}
                            OutputTxtBox.AppendText("Verifying " + resultVerifyGridView.SelectedCells[0].Value + "......\n");
                            OutputTxtBox.AppendText("Please wait....\n");
                            OutputTxtBox.AppendText("Done....\n");
                            OutputTxtBox.AppendText("======================\n");
                            
                            try
                            {
                                if (frmMain.ParseSpecificationAfterCluster(true, currentPNItem) != null)
                                {
                                    if (GUIUltility.AUTO_SAVE)
                                        frmMain.Save();

                                    
                                    PNTabItem cPNTabItem = currentPNItem as PNTabItem;
                                    PNExtendInfo extendInfo = null;
                                    if (cPNTabItem != null)
                                        extendInfo = cPNTabItem.mExtendInfo;

                                    frmMain.CurrentModule.ShowModelCheckingWindow(currentPNItem.TabText.TrimEnd('*'), extendInfo);
                                }
                            }
                            catch (Exception ex)
                            {
                                Utilities.LogException(ex, null);
                            }
                        }
                        else
                        {
                            frmMain.OpenFile(tmpName, true);
                            OutputTxtBox.AppendText("Please wait............\n");
                            OutputTxtBox.AppendText("Opening " + resultVerifyGridView.SelectedCells[0].Value + "......\n");
                            OutputTxtBox.AppendText("Open " + resultVerifyGridView.SelectedCells[0].Value + ".kwsn" + " successful\n");
                            //Log.d(TAG, "CurrentActiveTab: " + curretActiveTab);
                            EditorTabItem currentWSNItem = frmMain.DockContainer.Documents[frmMain.DockContainer.Documents.Length - 1] as EditorTabItem;
                            //Log.d(TAG, "CurrentEditorTabItem: " + frmMain.CurrentEditorTabItem.FileName);
                            int N = frmMain.DockContainer.Documents.Length;
                            DevLog.d(TAG, "Number Documents: " + N);

                            //convert to PN underground
                            int rowSelected = resultVerifyGridView.SelectedCells[0].RowIndex;
                            //resultVerifyGridView.Rows[rowSelected].Cells[0].Value="ma";
                            //resultVerifyGridView.Rows[rowSelected].Cells[1].Value = "tao";
                            resultVerifyGridView.Rows[rowSelected].Cells[2].Value = "la";

                            DevLog.d(TAG, "row: " + rowSelected);
                            Verify_Btn.Text = "STOP";
                            Close_Btn.Enabled = false;
                            VerifyAll_Btn.Enabled = false;
                            resultVerifyGridView.Enabled = false;
                            frmMain.convertToPNAfterCluster(false, true, resultVerifyGridView.SelectedCells[0].Value.ToString());//only channel
                            EditorTabItem currentPNItem = frmMain.DockContainer.Documents[frmMain.DockContainer.Documents.Length - 1] as EditorTabItem;
                            frmMain.Save();
                            currentWSNItem.Close();//Close WSNTabItem convert to PNTabItem
                            //Log.d(TAG, "Number Documents After: " + N);
                            currentPNItem.Close();//Close PNTabItem
                            //OutputTxtBox.AppendText("Done....\n");
                            //for(int m=0;m<N;m++)
                            //{
                            //    Log.d(TAG, "Document["+(m+1)+"]:" + frmMain.DockContainer.Documents[m]);
                            //}
                            OutputTxtBox.AppendText("Verifying " + resultVerifyGridView.SelectedCells[0].Value + "......\n");
                            OutputTxtBox.AppendText("Please wait....\n");
                            OutputTxtBox.AppendText("Done....\n");
                            OutputTxtBox.AppendText("======================\n");
                           
                            try
                            {
                                SpecificationBase spec = frmMain.ParseSpecificationAfterCluster(true, currentPNItem);

                                if (spec != null)
                                {
                                    if (GUIUltility.AUTO_SAVE)
                                        frmMain.Save();

                                    
                                    PNTabItem cPNTabItem = currentPNItem as PNTabItem;
                                    PNExtendInfo extendInfo = null;
                                    if (cPNTabItem != null)
                                        extendInfo = cPNTabItem.mExtendInfo;

                                    // frmMain.CurrentModule.ShowModelCheckingWindow(currentPNItem.TabText.TrimEnd('*'), extendInfo);


                                    (new ModelCheckingForm(currentPNItem.TabText.TrimEnd('*'), spec, extendInfo)).Show();
                                }
                            }
                            catch (Exception ex)
                            {
                                Utilities.LogException(ex, null);
                            }
                        }
                        
                        
                        //verify completed, enable all
                        Verify_Btn.Text = "Verify";
                        Close_Btn.Enabled = true;
                        VerifyAll_Btn.Enabled = true;
                        resultVerifyGridView.Enabled = true;
                        //VerificationIndex = 0;
                        //StartVerification(ListView_Assertions.SelectedItems[VerificationIndex]);
                        
                        var ram = new PerformanceCounter("Memory", "Available MBytes");
                        float cur = ram.NextValue(); // lấy dung lượng RAM free thời điểm hiện tại
                        ulong max = new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory;// lấy dung lượng tổng cộng của các thanh RAM
                        DevLog.d(TAG, "Ram: " + max);
                    }
                    //Log.d(TAG, "");
                }
            }
        }


        private void VerifyAllClusters_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (autoVerify is FormMain)
            {
                FormMain frmMain = autoVerify as FormMain;
                frmMain.Verify_all_clusters.Enabled = true;
            }
        }


        public void onValid(string param)
        {
            // throw new NotImplementedException();
        }
    }
}
